{{!-- META: {"name": "Token Mint API Route", "description": "Next.js API route for token minting", "language": "typescript"} --}}
{{#ifLanguage language "typescript"}}// pages/api/tokens/mint.ts or app/api/tokens/mint/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { htsManager } from '@/lib/hedera/hts-operations';
import { MintTokenParams } from '@/types/hedera';

export async function POST(request: NextRequest) {
  try {
    const body: MintTokenParams = await request.json();
    
    // Validate required fields
    if (!body.tokenId) {
      return NextResponse.json(
        { error: 'Token ID is required' },
        { status: 400 }
      );
    }

    // Validate token ID format
    if (!/^\d+\.\d+\.\d+$/.test(body.tokenId)) {
      return NextResponse.json(
        { error: 'Invalid token ID format. Expected format: 0.0.123' },
        { status: 400 }
      );
    }

    // Validate amount for fungible tokens
    if (body.amount !== undefined && (body.amount <= 0 || !Number.isInteger(body.amount))) {
      return NextResponse.json(
        { error: 'Amount must be a positive integer' },
        { status: 400 }
      );
    }

    const result = await htsManager.mintToken(body);
    
    return NextResponse.json({
      success: true,
      data: result
    });

  } catch (error) {
    console.error('Token minting error:', error);
    
    return NextResponse.json(
      { 
        error: 'Failed to mint token',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

// For Pages Router (pages/api/tokens/mint.ts)
export default async function handler(req: any, res: any) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const body: MintTokenParams = req.body;
    
    if (!body.tokenId) {
      return res.status(400).json({ error: 'Token ID is required' });
    }

    if (!/^\d+\.\d+\.\d+$/.test(body.tokenId)) {
      return res.status(400).json({ error: 'Invalid token ID format. Expected format: 0.0.123' });
    }

    if (body.amount !== undefined && (body.amount <= 0 || !Number.isInteger(body.amount))) {
      return res.status(400).json({ error: 'Amount must be a positive integer' });
    }

    const result = await htsManager.mintToken(body);
    
    res.status(200).json({
      success: true,
      data: result
    });

  } catch (error) {
    console.error('Token minting error:', error);
    
    res.status(500).json({
      error: 'Failed to mint token',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}
{{else}}// pages/api/tokens/mint.js
const { htsManager } = require('@/lib/hedera/hts-operations');

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { tokenId, amount, metadata } = req.body;
    
    if (!tokenId) {
      return res.status(400).json({ error: 'Token ID is required' });
    }

    const result = await htsManager.mintToken({
      tokenId,
      amount,
      metadata
    });
    
    res.status(200).json({
      success: true,
      data: result
    });

  } catch (error) {
    console.error('Token minting error:', error);
    
    res.status(500).json({
      error: 'Failed to mint token',
      details: error.message || 'Unknown error'
    });
  }
}
{{/ifLanguage}}