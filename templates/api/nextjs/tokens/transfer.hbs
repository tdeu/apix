{{!-- META: {"name": "Token Transfer API Route", "description": "Next.js API route for token transfers", "language": "typescript"} --}}
{{#ifLanguage language "typescript"}}// pages/api/tokens/transfer.ts or app/api/tokens/transfer/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { htsManager } from '@/lib/hedera/hts-operations';
import { TransferTokenParams } from '@/types/hedera';

export async function POST(request: NextRequest) {
  try {
    const body: TransferTokenParams = await request.json();
    
    // Validate required fields
    if (!body.tokenId || !body.fromAccountId || !body.toAccountId || !body.amount) {
      return NextResponse.json(
        { error: 'Token ID, from account ID, to account ID, and amount are required' },
        { status: 400 }
      );
    }

    // Validate token ID format
    if (!/^\d+\.\d+\.\d+$/.test(body.tokenId)) {
      return NextResponse.json(
        { error: 'Invalid token ID format. Expected format: 0.0.123' },
        { status: 400 }
      );
    }

    // Validate account ID formats
    if (!/^\d+\.\d+\.\d+$/.test(body.fromAccountId)) {
      return NextResponse.json(
        { error: 'Invalid from account ID format. Expected format: 0.0.123' },
        { status: 400 }
      );
    }

    if (!/^\d+\.\d+\.\d+$/.test(body.toAccountId)) {
      return NextResponse.json(
        { error: 'Invalid to account ID format. Expected format: 0.0.123' },
        { status: 400 }
      );
    }

    // Validate amount
    if (body.amount <= 0 || !Number.isInteger(body.amount)) {
      return NextResponse.json(
        { error: 'Amount must be a positive integer' },
        { status: 400 }
      );
    }

    // Prevent self-transfer
    if (body.fromAccountId === body.toAccountId) {
      return NextResponse.json(
        { error: 'Cannot transfer tokens to the same account' },
        { status: 400 }
      );
    }

    const result = await htsManager.transferToken(body);
    
    return NextResponse.json({
      success: true,
      data: result
    });

  } catch (error) {
    console.error('Token transfer error:', error);
    
    return NextResponse.json(
      { 
        error: 'Failed to transfer token',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

// For Pages Router (pages/api/tokens/transfer.ts)
export default async function handler(req: any, res: any) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const body: TransferTokenParams = req.body;
    
    if (!body.tokenId || !body.fromAccountId || !body.toAccountId || !body.amount) {
      return res.status(400).json({ 
        error: 'Token ID, from account ID, to account ID, and amount are required' 
      });
    }

    if (!/^\d+\.\d+\.\d+$/.test(body.tokenId)) {
      return res.status(400).json({ error: 'Invalid token ID format. Expected format: 0.0.123' });
    }

    if (!/^\d+\.\d+\.\d+$/.test(body.fromAccountId)) {
      return res.status(400).json({ error: 'Invalid from account ID format. Expected format: 0.0.123' });
    }

    if (!/^\d+\.\d+\.\d+$/.test(body.toAccountId)) {
      return res.status(400).json({ error: 'Invalid to account ID format. Expected format: 0.0.123' });
    }

    if (body.amount <= 0 || !Number.isInteger(body.amount)) {
      return res.status(400).json({ error: 'Amount must be a positive integer' });
    }

    if (body.fromAccountId === body.toAccountId) {
      return res.status(400).json({ error: 'Cannot transfer tokens to the same account' });
    }

    const result = await htsManager.transferToken(body);
    
    res.status(200).json({
      success: true,
      data: result
    });

  } catch (error) {
    console.error('Token transfer error:', error);
    
    res.status(500).json({
      error: 'Failed to transfer token',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}
{{else}}// pages/api/tokens/transfer.js
const { htsManager } = require('@/lib/hedera/hts-operations');

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { tokenId, fromAccountId, toAccountId, amount } = req.body;
    
    if (!tokenId || !fromAccountId || !toAccountId || !amount) {
      return res.status(400).json({ 
        error: 'Token ID, from account ID, to account ID, and amount are required' 
      });
    }

    if (fromAccountId === toAccountId) {
      return res.status(400).json({ error: 'Cannot transfer tokens to the same account' });
    }

    const result = await htsManager.transferToken({
      tokenId,
      fromAccountId,
      toAccountId,
      amount
    });
    
    res.status(200).json({
      success: true,
      data: result
    });

  } catch (error) {
    console.error('Token transfer error:', error);
    
    res.status(500).json({
      error: 'Failed to transfer token',
      details: error.message || 'Unknown error'
    });
  }
}
{{/ifLanguage}}