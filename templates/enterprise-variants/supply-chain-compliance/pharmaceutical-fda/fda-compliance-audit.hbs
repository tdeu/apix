{{!-- META: {"name": "FDA Compliance Audit System", "description": "FDA 21 CFR Part 11 compliant audit trail for pharmaceutical supply chain", "language": "typescript", "industry": "pharmaceutical", "regulation": "FDA-21CFR11"} --}}
{{#ifLanguage language "typescript"}}import { 
  Client, 
  TopicCreateTransaction,
  TopicMessageSubmitTransaction,
  TopicInfoQuery,
  TopicId,
  AccountId,
  PrivateKey,
  Timestamp
} from '@hashgraph/sdk';
import { createDefaultClient } from '../../../utils/common/hedera-client';

export interface FDAComplianceRecord {
  // Core FDA 21 CFR Part 11 requirements
  recordId: string;
  timestamp: Date;
  operatorId: string;
  operatorSignature: string;
  
  // Pharmaceutical-specific data
  batchNumber: string;
  productCode: string;
  facilityId: string;
  operationType: 'manufacturing' | 'packaging' | 'testing' | 'shipping' | 'receiving';
  
  // Audit trail data
  auditData: {
    beforeState?: any;
    afterState: any;
    changeReason: string;
    witnessId?: string;
    witnessSignature?: string;
  };
  
  // Regulatory metadata
  regulatoryCompliance: {
    fdaStandard: 'CFR-21-Part-11';
    validationStatus: 'validated' | 'pending-validation' | 'non-compliant';
    retentionPeriod: number; // years
    archivalRequired: boolean;
  };
}

export interface FDAValidationResult {
  isCompliant: boolean;
  violations: string[];
  recommendations: string[];
  auditTrailIntegrity: boolean;
  electronicSignatureValid: boolean;
}

export class FDAComplianceAuditSystem {
  private client: Client;
  private auditTopicId: TopicId | null = null;
  private complianceConfig: FDAComplianceConfig;

  constructor(config: FDAComplianceConfig) {
    this.client = createDefaultClient();
    this.complianceConfig = config;
  }

  /**
   * Initialize FDA compliance audit topic
   * Creates immutable audit trail on Hedera Consensus Service
   */
  async initializeComplianceSystem(): Promise<TopicId> {
    try {
      const transaction = await new TopicCreateTransaction()
        .setTopicMemo(`FDA-21CFR11-Audit-${this.complianceConfig.facilityId}`)
        .setSubmitKey(this.complianceConfig.submitKey)
        .setAdminKey(this.complianceConfig.adminKey)
        .execute(this.client);

      const receipt = await transaction.getReceipt(this.client);
      this.auditTopicId = receipt.topicId;

      // Create initial compliance record
      await this.recordComplianceEvent({
        recordId: `INIT-${Date.now()}`,
        timestamp: new Date(),
        operatorId: this.complianceConfig.systemOperatorId,
        operatorSignature: await this.generateElectronicSignature('system-initialization'),
        batchNumber: 'N/A',
        productCode: 'SYSTEM',
        facilityId: this.complianceConfig.facilityId,
        operationType: 'manufacturing',
        auditData: {
          afterState: {
            systemStatus: 'initialized',
            complianceVersion: '2.0.0',
            fdaStandard: 'CFR-21-Part-11'
          },
          changeReason: 'FDA compliance system initialization'
        },
        regulatoryCompliance: {
          fdaStandard: 'CFR-21-Part-11',
          validationStatus: 'validated',
          retentionPeriod: {{retentionPeriod}},
          archivalRequired: true
        }
      });

      return this.auditTopicId;
    } catch (error) {
      throw new Error(`Failed to initialize FDA compliance system: ${error.message}`);
    }
  }

  /**
   * Record FDA-compliant audit event
   * All pharmaceutical operations must be recorded for regulatory compliance
   */
  async recordComplianceEvent(record: FDAComplianceRecord): Promise<string> {
    if (!this.auditTopicId) {
      throw new Error('Compliance system not initialized. Call initializeComplianceSystem() first.');
    }

    try {
      // Validate FDA compliance requirements
      const validationResult = await this.validateFDACompliance(record);
      if (!validationResult.isCompliant) {
        throw new Error(`FDA compliance validation failed: ${validationResult.violations.join(', ')}`);
      }

      // Create immutable audit record
      const auditMessage = this.createFDACompliantMessage(record);
      
      const transaction = await new TopicMessageSubmitTransaction()
        .setTopicId(this.auditTopicId)
        .setMessage(JSON.stringify(auditMessage))
        .execute(this.client);

      const receipt = await transaction.getReceipt(this.client);
      const sequenceNumber = receipt.topicSequenceNumber;

      // Store reference for FDA audit retrieval
      await this.storeAuditReference(record.recordId, sequenceNumber.toString());

      return sequenceNumber.toString();
    } catch (error) {
      // FDA requires error logging
      await this.logComplianceError(record, error);
      throw error;
    }
  }

  /**
   * Validate FDA 21 CFR Part 11 compliance
   * Ensures all regulatory requirements are met
   */
  private async validateFDACompliance(record: FDAComplianceRecord): Promise<FDAValidationResult> {
    const violations: string[] = [];
    const recommendations: string[] = [];

    // 1. Electronic Signature Requirements (21 CFR 11.100)
    if (!record.operatorSignature || record.operatorSignature.length < 64) {
      violations.push('Invalid electronic signature - must meet 21 CFR 11.100 requirements');
    }

    // 2. Audit Trail Requirements (21 CFR 11.10)
    if (!record.auditData.changeReason) {
      violations.push('Missing change reason - required by 21 CFR 11.10(e)');
    }

    // 3. Time Stamp Requirements (21 CFR 11.50)
    const timeDifference = Math.abs(Date.now() - record.timestamp.getTime());
    if (timeDifference > 60000) { // 1 minute tolerance
      violations.push('Timestamp validation failed - records must be created in real-time');
    }

    // 4. Data Integrity Requirements (21 CFR 11.10)
    if (!this.validateDataIntegrity(record)) {
      violations.push('Data integrity check failed');
    }

    // 5. Access Control Requirements (21 CFR 11.300)
    if (!await this.validateOperatorAccess(record.operatorId, record.operationType)) {
      violations.push('Operator access validation failed');
    }

    // Generate recommendations
    if (!record.auditData.witnessId && record.operationType === 'manufacturing') {
      recommendations.push('Consider adding witness signature for manufacturing operations');
    }

    if (record.regulatoryCompliance.retentionPeriod < 3) {
      recommendations.push('FDA recommends minimum 3-year retention for pharmaceutical records');
    }

    return {
      isCompliant: violations.length === 0,
      violations,
      recommendations,
      auditTrailIntegrity: this.validateAuditTrailIntegrity(record),
      electronicSignatureValid: this.validateElectronicSignature(record.operatorSignature)
    };
  }

  /**
   * Generate FDA-compliant electronic signature
   * Meets 21 CFR 11.100 requirements for electronic signatures
   */
  private async generateElectronicSignature(data: string): Promise<string> {
    const signatureData = {
      data,
      operator: this.complianceConfig.systemOperatorId,
      timestamp: new Date().toISOString(),
      facility: this.complianceConfig.facilityId,
      intent: 'regulatory-compliance'
    };

    // Generate cryptographic signature (placeholder - implement with proper HSM)
    const signature = Buffer.from(JSON.stringify(signatureData)).toString('base64');
    return signature;
  }

  /**
   * Create FDA-compliant message format
   * Ensures all required metadata is included
   */
  private createFDACompliantMessage(record: FDAComplianceRecord): any {
    return {
      // FDA Header
      fdaCompliance: {
        standard: 'CFR-21-Part-11',
        version: '2.0.0',
        facility: this.complianceConfig.facilityId,
        validationDate: new Date().toISOString()
      },
      
      // Core record data
      record,
      
      // Audit metadata
      auditMetadata: {
        systemVersion: '{{version}}',
        complianceOfficer: this.complianceConfig.complianceOfficerId,
        validationMethod: 'automated-hedera-consensus',
        regulatoryFramework: 'FDA-21CFR11'
      },
      
      // Integrity verification
      integrity: {
        checksum: this.calculateChecksum(record),
        hashAlgorithm: 'SHA-256',
        signatureMethod: 'ECDSA'
      }
    };
  }

  /**
   * Query compliance records for FDA audits
   * Supports regulatory inspection requirements
   */
  async queryComplianceRecords(
    startDate: Date,
    endDate: Date,
    batchNumber?: string
  ): Promise<FDAComplianceRecord[]> {
    // Implementation would query Hedera mirror node
    // and return FDA-formatted compliance records
    throw new Error('Implementation pending - requires mirror node integration');
  }

  /**
   * Generate FDA audit report
   * Creates comprehensive report for regulatory inspections
   */
  async generateFDAAuditReport(
    startDate: Date,
    endDate: Date,
    reportType: 'facility' | 'product' | 'batch'
  ): Promise<FDAAuditReport> {
    // Implementation would generate comprehensive FDA audit report
    throw new Error('Implementation pending - requires audit report generation');
  }

  // Helper methods for validation
  private validateDataIntegrity(record: FDAComplianceRecord): boolean {
    // Implement data integrity validation
    return true;
  }

  private async validateOperatorAccess(operatorId: string, operationType: string): Promise<boolean> {
    // Implement operator access validation
    return true;
  }

  private validateAuditTrailIntegrity(record: FDAComplianceRecord): boolean {
    // Implement audit trail integrity validation
    return true;
  }

  private validateElectronicSignature(signature: string): boolean {
    // Implement electronic signature validation
    return signature.length >= 64;
  }

  private calculateChecksum(record: FDAComplianceRecord): string {
    // Implement SHA-256 checksum calculation
    return 'placeholder-checksum';
  }

  private async storeAuditReference(recordId: string, sequenceNumber: string): Promise<void> {
    // Store reference for quick retrieval
  }

  private async logComplianceError(record: FDAComplianceRecord, error: any): Promise<void> {
    // Log compliance errors for FDA review
  }
}

// Configuration interface
export interface FDAComplianceConfig {
  facilityId: string;
  complianceOfficerId: string;
  systemOperatorId: string;
  submitKey: PrivateKey;
  adminKey: PrivateKey;
  retentionPolicy: {
    defaultPeriodYears: number;
    archivalRequired: boolean;
    automatedDeletion: boolean;
  };
}

// Report interfaces
export interface FDAAuditReport {
  reportId: string;
  generationDate: Date;
  reportPeriod: {
    startDate: Date;
    endDate: Date;
  };
  facility: string;
  complianceStatus: 'compliant' | 'non-compliant' | 'pending-review';
  recordsAnalyzed: number;
  violationsFound: number;
  recommendations: string[];
  auditTrail: FDAComplianceRecord[];
}

export default FDAComplianceAuditSystem;
{{/ifLanguage}}