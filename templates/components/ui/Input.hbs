{{!-- META: {"name": "Input UI Component", "description": "Reusable input component with label and validation", "language": "typescript"} --}}
{{#ifLanguage language "typescript"}}import React, { InputHTMLAttributes, forwardRef } from 'react';
import { cn } from '@/lib/utils';

export interface InputProps extends InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  error?: string;
  helperText?: string;
  leftIcon?: React.ReactNode;
  rightIcon?: React.ReactNode;
  containerClassName?: string;
}

export const Input = forwardRef<HTMLInputElement, InputProps>(
  ({ 
    className,
    containerClassName,
    label,
    error,
    helperText,
    leftIcon,
    rightIcon,
    type = 'text',
    id,
    ...props 
  }, ref) => {
    const inputId = id || label?.toLowerCase().replace(/\s+/g, '-');

    return (
      <div className={cn('space-y-2', containerClassName)}>
        {label && (
          <label 
            htmlFor={inputId}
            className="block text-sm font-medium text-gray-700"
          >
            {label}
            {props.required && <span className="text-red-500 ml-1">*</span>}
          </label>
        )}
        
        <div className="relative">
          {leftIcon && (
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <div className="text-gray-400 text-sm">
                {leftIcon}
              </div>
            </div>
          )}
          
          <input
            ref={ref}
            type={type}
            id={inputId}
            className={cn(
              // Base styles
              'block w-full rounded-md border border-gray-300 shadow-sm',
              'px-3 py-2 text-base placeholder-gray-400',
              'transition-colors duration-200',
              
              // Focus styles
              'focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none',
              
              // Error styles
              error && 'border-red-500 focus:border-red-500 focus:ring-red-500',
              
              // Disabled styles
              'disabled:bg-gray-50 disabled:text-gray-500 disabled:cursor-not-allowed',
              
              // Icon padding
              leftIcon && 'pl-10',
              rightIcon && 'pr-10',
              
              className
            )}
            {...props}
          />
          
          {rightIcon && (
            <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
              <div className="text-gray-400 text-sm">
                {rightIcon}
              </div>
            </div>
          )}
        </div>
        
        {(error || helperText) && (
          <div className="text-sm">
            {error ? (
              <p className="text-red-600 flex items-center">
                <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                </svg>
                {error}
              </p>
            ) : (
              <p className="text-gray-500">{helperText}</p>
            )}
          </div>
        )}
      </div>
    );
  }
);

Input.displayName = 'Input';

// Textarea component
export interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {
  label?: string;
  error?: string;
  helperText?: string;
  containerClassName?: string;
}

export const Textarea = forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ 
    className,
    containerClassName,
    label,
    error,
    helperText,
    id,
    rows = 4,
    ...props 
  }, ref) => {
    const textareaId = id || label?.toLowerCase().replace(/\s+/g, '-');

    return (
      <div className={cn('space-y-2', containerClassName)}>
        {label && (
          <label 
            htmlFor={textareaId}
            className="block text-sm font-medium text-gray-700"
          >
            {label}
            {props.required && <span className="text-red-500 ml-1">*</span>}
          </label>
        )}
        
        <textarea
          ref={ref}
          id={textareaId}
          rows={rows}
          className={cn(
            // Base styles
            'block w-full rounded-md border border-gray-300 shadow-sm',
            'px-3 py-2 text-base placeholder-gray-400 resize-vertical',
            'transition-colors duration-200',
            
            // Focus styles
            'focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none',
            
            // Error styles
            error && 'border-red-500 focus:border-red-500 focus:ring-red-500',
            
            // Disabled styles
            'disabled:bg-gray-50 disabled:text-gray-500 disabled:cursor-not-allowed',
            
            className
          )}
          {...props}
        />
        
        {(error || helperText) && (
          <div className="text-sm">
            {error ? (
              <p className="text-red-600 flex items-center">
                <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                </svg>
                {error}
              </p>
            ) : (
              <p className="text-gray-500">{helperText}</p>
            )}
          </div>
        )}
      </div>
    );
  }
);

Textarea.displayName = 'Textarea';

// Utility function for class names (if not available)
function cn(...classes: (string | undefined | null | false)[]): string {
  return classes.filter(Boolean).join(' ');
}
{{else}}import React, { forwardRef } from 'react';

export const Input = forwardRef(({ 
  className = '',
  containerClassName = '',
  label,
  error,
  helperText,
  leftIcon,
  rightIcon,
  type = 'text',
  id,
  ...props 
}, ref) => {
  const inputId = id || (label && label.toLowerCase().replace(/\s+/g, '-'));
  
  const baseClasses = 'block w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 text-base placeholder-gray-400 transition-colors duration-200 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none disabled:bg-gray-50 disabled:text-gray-500 disabled:cursor-not-allowed';
  
  let inputClasses = baseClasses;
  if (error) {
    inputClasses += ' border-red-500 focus:border-red-500 focus:ring-red-500';
  }
  if (leftIcon) {
    inputClasses += ' pl-10';
  }
  if (rightIcon) {
    inputClasses += ' pr-10';
  }
  if (className) {
    inputClasses += ' ' + className;
  }

  return (
    <div className={`space-y-2 ${containerClassName}`}>
      {label && (
        <label 
          htmlFor={inputId}
          className="block text-sm font-medium text-gray-700"
        >
          {label}
          {props.required && <span className="text-red-500 ml-1">*</span>}
        </label>
      )}
      
      <div className="relative">
        {leftIcon && (
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <div className="text-gray-400 text-sm">{leftIcon}</div>
          </div>
        )}
        
        <input
          ref={ref}
          type={type}
          id={inputId}
          className={inputClasses}
          {...props}
        />
        
        {rightIcon && (
          <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
            <div className="text-gray-400 text-sm">{rightIcon}</div>
          </div>
        )}
      </div>
      
      {(error || helperText) && (
        <div className="text-sm">
          {error ? (
            <p className="text-red-600">{error}</p>
          ) : (
            <p className="text-gray-500">{helperText}</p>
          )}
        </div>
      )}
    </div>
  );
});

Input.displayName = 'Input';
{{/ifLanguage}}