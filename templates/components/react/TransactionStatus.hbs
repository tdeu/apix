{{!-- META: {"name": "Transaction Status Component", "description": "React component for displaying transaction status and details", "language": "typescript"} --}}
{{#ifLanguage language "typescript"}}import React, { useState } from 'react';
import { TransactionResult } from '@/types/hedera';
import { Button } from './ui/Button';
import { Card } from './ui/Card';

interface TransactionStatusProps {
  transaction?: TransactionResult;
  isLoading?: boolean;
  showDetails?: boolean;
  onRetry?: () => void;
  className?: string;
}

export const TransactionStatus: React.FC<TransactionStatusProps> = ({
  transaction,
  isLoading = false,
  showDetails = false,
  onRetry,
  className = ''
}) => {
  const [expanded, setExpanded] = useState(false);

  if (isLoading) {
    return (
      <Card className={`border-blue-200 bg-blue-50 ${className}`}>
        <div className="flex items-center space-x-3">
          <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600"></div>
          <div className="text-blue-800">
            <div className="font-medium">Processing Transaction</div>
            <div className="text-sm text-blue-600">Please wait while your transaction is being processed...</div>
          </div>
        </div>
      </Card>
    );
  }

  if (!transaction) {
    return null;
  }

  const isSuccess = transaction.status === 'SUCCESS' || transaction.status === 'success';
  const isPending = transaction.status === 'PENDING' || transaction.status === 'pending';
  const isError = !isSuccess && !isPending;

  const getStatusColor = () => {
    if (isSuccess) return 'green';
    if (isPending) return 'yellow';
    return 'red';
  };

  const getStatusIcon = () => {
    if (isSuccess) return '✓';
    if (isPending) return '⏳';
    return '✗';
  };

  const statusColor = getStatusColor();
  const statusIcon = getStatusIcon();

  const openHashScan = () => {
    const network = process.env.NEXT_PUBLIC_HEDERA_NETWORK === 'mainnet' ? '' : 'testnet.';
    const url = `https://${network}hashscan.io/transaction/${transaction.transactionId}`;
    window.open(url, '_blank');
  };

  return (
    <Card className={`border-${statusColor}-200 bg-${statusColor}-50 ${className}`}>
      <div className="space-y-3">
        {/* Status Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className={`flex-shrink-0 w-8 h-8 rounded-full bg-${statusColor}-100 flex items-center justify-center`}>
              <span className={`text-${statusColor}-600 font-medium`}>{statusIcon}</span>
            </div>
            <div>
              <div className={`font-medium text-${statusColor}-800`}>
                {isSuccess && 'Transaction Successful'}
                {isPending && 'Transaction Pending'}
                {isError && 'Transaction Failed'}
              </div>
              <div className={`text-sm text-${statusColor}-600`}>
                {transaction.transactionId}
              </div>
            </div>
          </div>
          
          <div className="flex items-center space-x-2">
            {showDetails && (
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setExpanded(!expanded)}
                className={`text-${statusColor}-600 hover:text-${statusColor}-800`}
              >
                {expanded ? 'Hide Details' : 'Show Details'}
              </Button>
            )}
            <Button
              variant="outline"
              size="sm"
              onClick={openHashScan}
              className="border-gray-300"
            >
              View on HashScan
            </Button>
            {isError && onRetry && (
              <Button
                variant="outline"
                size="sm"
                onClick={onRetry}
                className="border-red-300 text-red-600 hover:text-red-800"
              >
                Retry
              </Button>
            )}
          </div>
        </div>

        {/* Transaction Details */}
        {expanded && (
          <div className={`border-t border-${statusColor}-200 pt-3`}>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div>
                <strong className={`text-${statusColor}-800`}>Transaction ID:</strong>
                <div className={`text-${statusColor}-600 font-mono text-xs break-all`}>
                  {transaction.transactionId}
                </div>
              </div>
              
              <div>
                <strong className={`text-${statusColor}-800`}>Status:</strong>
                <div className={`text-${statusColor}-600`}>{transaction.status}</div>
              </div>

              {transaction.consensusTimestamp && (
                <div>
                  <strong className={`text-${statusColor}-800`}>Consensus Timestamp:</strong>
                  <div className={`text-${statusColor}-600`}>
                    {new Date(transaction.consensusTimestamp).toLocaleString()}
                  </div>
                </div>
              )}

              {transaction.charged && (
                <div>
                  <strong className={`text-${statusColor}-800`}>Fee Charged:</strong>
                  <div className={`text-${statusColor}-600`}>{transaction.charged} HBAR</div>
                </div>
              )}

              {(transaction as any).tokenId && (
                <div>
                  <strong className={`text-${statusColor}-800`}>Token ID:</strong>
                  <div className={`text-${statusColor}-600 font-mono`}>{(transaction as any).tokenId}</div>
                </div>
              )}

              {(transaction as any).newTotalSupply && (
                <div>
                  <strong className={`text-${statusColor}-800`}>New Total Supply:</strong>
                  <div className={`text-${statusColor}-600`}>{(transaction as any).newTotalSupply}</div>
                </div>
              )}

              {(transaction as any).serialNumbers && (
                <div className="col-span-2">
                  <strong className={`text-${statusColor}-800`}>Serial Numbers:</strong>
                  <div className={`text-${statusColor}-600`}>
                    {(transaction as any).serialNumbers.join(', ')}
                  </div>
                </div>
              )}
            </div>

            {transaction.receipt && (
              <div className="mt-3">
                <strong className={`text-${statusColor}-800`}>Receipt:</strong>
                <pre className={`text-xs text-${statusColor}-600 bg-${statusColor}-100 rounded p-2 overflow-x-auto mt-1`}>
                  {JSON.stringify(transaction.receipt, null, 2)}
                </pre>
              </div>
            )}
          </div>
        )}

        {/* Success Message */}
        {isSuccess && (
          <div className={`text-sm text-${statusColor}-600`}>
            Your transaction has been successfully processed on the Hedera network.
          </div>
        )}

        {/* Pending Message */}
        {isPending && (
          <div className={`text-sm text-${statusColor}-600`}>
            Your transaction is being processed. This usually takes a few seconds.
          </div>
        )}

        {/* Error Message */}
        {isError && (
          <div className={`text-sm text-${statusColor}-600`}>
            Your transaction failed to process. Please check the details and try again.
          </div>
        )}
      </div>
    </Card>
  );
};
{{else}}import React, { useState } from 'react';

export const TransactionStatus = ({
  transaction,
  isLoading = false,
  showDetails = false,
  onRetry,
  className = ''
}) => {
  const [expanded, setExpanded] = useState(false);

  if (isLoading) {
    return (
      <div className={`border border-blue-200 bg-blue-50 rounded-lg p-4 ${className}`}>
        <div className="flex items-center space-x-3">
          <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600"></div>
          <div className="text-blue-800">
            <div className="font-medium">Processing Transaction</div>
            <div className="text-sm text-blue-600">Please wait...</div>
          </div>
        </div>
      </div>
    );
  }

  if (!transaction) return null;

  // JavaScript implementation without TypeScript features
  return (
    <div className={`border rounded-lg p-4 ${className}`}>
      {/* Similar structure but without TypeScript types */}
    </div>
  );
};
{{/ifLanguage}}