{{!-- META: {"name": "Wallet Connect Component V2", "description": "Complete wallet connection interface with account switching", "language": "typescript"} --}}
{{#ifLanguage language "typescript"}}import React, { useState, useRef, useEffect } from 'react';
import { useWallet } from '@/hooks/useWalletOperations';
import { WalletConnectionModal } from './WalletConnectionModal';
import { Button } from '@/components/ui/Button';

export interface WalletConnectProps {
  onConnect?: (account: any) => void;
  onDisconnect?: () => void;
  showBalance?: boolean;
  showNetworkBadge?: boolean;
  compact?: boolean;
  autoConnect?: boolean;
}

export const WalletConnect: React.FC<WalletConnectProps> = ({
  onConnect,
  onDisconnect,
  showBalance = true,
  showNetworkBadge = true,
  compact = false,
  autoConnect = true
}) => {
  const { 
    isConnected, 
    isConnecting, 
    account, 
    accounts,
    provider,
    error,
    connect,
    disconnect,
    switchAccount,
    clearError 
  } = useWallet();

  const [showModal, setShowModal] = useState(false);
  const [showAccountMenu, setShowAccountMenu] = useState(false);
  const [accountBalance, setAccountBalance] = useState<string>('--');
  const menuRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        setShowAccountMenu(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const handleConnect = (provider: string) => {
    onConnect?.(account);
    setShowModal(false);
  };

  const handleDisconnect = async () => {
    try {
      await disconnect();
      onDisconnect?.();
      setShowAccountMenu(false);
    } catch (error) {
      console.error('Disconnect failed:', error);
    }
  };

  const handleSwitchAccount = async (accountId: string) => {
    try {
      await switchAccount(accountId);
      setShowAccountMenu(false);
    } catch (error) {
      console.error('Account switch failed:', error);
    }
  };

  const formatAccountId = (accountId: string) => {
    if (compact) {
      const parts = accountId.split('.');
      return `${parts[0]}.${parts[1]}.${parts[2].slice(-4)}`;
    }
    return accountId;
  };

  const getNetworkColor = (network?: string) => {
    switch (network) {
      case 'mainnet': return 'bg-green-100 text-green-800';
      case 'testnet': return 'bg-blue-100 text-blue-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  // Connected state
  if (isConnected && account) {
    return (
      <div className="relative" ref={menuRef}>
        <div
          className={`
            flex items-center space-x-3 p-3 bg-white border border-gray-200 rounded-lg cursor-pointer
            hover:bg-gray-50 transition-colors
            ${compact ? 'p-2' : ''}
          `}
          onClick={() => setShowAccountMenu(!showAccountMenu)}
        >
          {/* Account Avatar */}
          <div className="flex-shrink-0">
            <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
              <span className="text-white text-sm font-medium">
                {account.accountId.split('.')[2].slice(-2)}
              </span>
            </div>
          </div>

          {/* Account Info */}
          <div className="flex-1 min-w-0">
            <div className="flex items-center space-x-2">
              <p className={`font-medium text-gray-900 truncate ${compact ? 'text-sm' : 'text-base'}`}>
                {formatAccountId(account.accountId)}
              </p>
              {showNetworkBadge && account.network && (
                <span className={`px-2 py-1 text-xs rounded-full ${getNetworkColor(account.network)}`}>
                  {account.network}
                </span>
              )}
            </div>
            {showBalance && !compact && (
              <p className="text-sm text-gray-500">
                Balance: {accountBalance} HBAR
              </p>
            )}
            {provider && !compact && (
              <p className="text-xs text-gray-400 capitalize">
                via {provider}
              </p>
            )}
          </div>

          {/* Dropdown Arrow */}
          <div className="flex-shrink-0">
            <svg
              className={`w-4 h-4 text-gray-400 transition-transform ${
                showAccountMenu ? 'rotate-180' : ''
              }`}
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
            </svg>
          </div>
        </div>

        {/* Account Menu */}
        {showAccountMenu && (
          <div className="absolute right-0 mt-2 w-80 bg-white border border-gray-200 rounded-lg shadow-lg z-50">
            <div className="p-4">
              <h3 className="text-sm font-medium text-gray-900 mb-3">Connected Account</h3>
              
              {/* Current Account Details */}
              <div className="bg-gray-50 rounded-lg p-3 mb-4">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm font-medium text-gray-900">{account.accountId}</span>
                  {account.network && (
                    <span className={`px-2 py-1 text-xs rounded ${getNetworkColor(account.network)}`}>
                      {account.network}
                    </span>
                  )}
                </div>
                <div className="text-sm text-gray-500">
                  <div>Balance: {accountBalance} HBAR</div>
                  {account.evmAddress && (
                    <div className="truncate">EVM: {account.evmAddress}</div>
                  )}
                </div>
              </div>

              {/* Multiple Accounts */}
              {accounts.length > 1 && (
                <div className="mb-4">
                  <h4 className="text-sm font-medium text-gray-900 mb-2">Switch Account</h4>
                  <div className="space-y-1">
                    {accounts.filter(acc => acc.accountId !== account.accountId).map((acc) => (
                      <button
                        key={acc.accountId}
                        onClick={() => handleSwitchAccount(acc.accountId)}
                        className="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md transition-colors"
                      >
                        {acc.accountId}
                      </button>
                    ))}
                  </div>
                </div>
              )}

              {/* Actions */}
              <div className="flex space-x-2 pt-4 border-t border-gray-200">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowAccountMenu(false)}
                  className="flex-1"
                >
                  Close
                </Button>
                <Button
                  variant="destructive"
                  size="sm"
                  onClick={handleDisconnect}
                  className="flex-1"
                >
                  Disconnect
                </Button>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  }

  // Disconnected state
  return (
    <div>
      <Button
        onClick={() => setShowModal(true)}
        disabled={isConnecting}
        className="flex items-center space-x-2"
        variant="primary"
      >
        {isConnecting ? (
          <>
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
            <span>Connecting...</span>
          </>
        ) : (
          <>
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
            </svg>
            <span>Connect Wallet</span>
          </>
        )}
      </Button>

      <WalletConnectionModal
        isOpen={showModal}
        onClose={() => setShowModal(false)}
        onConnect={handleConnect}
      />
    </div>
  );
};
{{else}}import React, { useState } from 'react';
import { useWallet } from '@/hooks/useWalletOperations';
import { WalletConnectionModal } from './WalletConnectionModal';

export const WalletConnect = ({ 
  onConnect, 
  onDisconnect, 
  showBalance = true,
  compact = false 
}) => {
  const { isConnected, account, disconnect } = useWallet();
  const [showModal, setShowModal] = useState(false);

  const handleDisconnect = async () => {
    await disconnect();
    onDisconnect && onDisconnect();
  };

  if (isConnected && account) {
    return (
      <div className="flex items-center space-x-3 p-3 bg-white border rounded-lg">
        <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
          <span className="text-white text-sm">
            {account.accountId.split('.')[2].slice(-2)}
          </span>
        </div>
        <div className="flex-1">
          <p className="font-medium text-gray-900">{account.accountId}</p>
          {showBalance && (
            <p className="text-sm text-gray-500">Balance: -- HBAR</p>
          )}
        </div>
        <button
          onClick={handleDisconnect}
          className="text-sm text-red-600 hover:text-red-800"
        >
          Disconnect
        </button>
      </div>
    );
  }

  return (
    <div>
      <button
        onClick={() => setShowModal(true)}
        className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
      >
        Connect Wallet
      </button>

      <WalletConnectionModal
        isOpen={showModal}
        onClose={() => setShowModal(false)}
        onConnect={() => setShowModal(false)}
      />
    </div>
  );
};
{{/ifLanguage}}